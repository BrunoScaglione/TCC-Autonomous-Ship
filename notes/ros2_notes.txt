ros2 node list
ros2 topic list -t

ros2 topic list -t will return the same list of topics, 
this time with the topic type appended in brackets

ros2 service list -t
ros2 action list

----------------

ros2 run <package_name> <executable_name>

----------------

Remapping allows you to reassign default node properties, 
like node name, topic names, service names, etc., to custom values.

Now, lets reassign the name of our /turtlesim node

ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle

----------------

ros2 node info <node_name>

ros2 node info returns a list of subscribers, publishers, services, 
and actions (the ROS graph connections) that interact with that node

-----------

names of nodes not necessarily = name of executable_name

ros2 run turtlesim turtle_teleop_key
Recall from the previous tutorial that the names of these nodes are 
/turtlesim and /teleop_turtle by default.

-------------

rqt 

ou can also open rqt_graph by opening rqt 
and selecting Plugins > Introspection > Node Graph.

rqt_graph


---------------

To see the data being published on a topic, use:

ros2 topic echo <topic_name>

/_ros2cli_26646 is the node created by the echo we just ran (the number might be different). 
Now you can see that the publisher is 
publishing data over the cmd_vel topic, and two subscribers are subscribed


ros2 topic info /turtle1/cmd_vel
Which will return:

Type: geometry_msgs/msg/Twist
Publisher count: 1
Subscription count: 2

------------------

geometry_msgs/msg/Twist
This means that in the package geometry_msgs there is a msg called Twist.

ros2 interface show geometry_msgs/msg/Twist
For the message type from above it yields:

This expresses velocity in free space broken into its linear and angular parts.

    Vector3  linear
            float64 x
            float64 y
            float64 z
    Vector3  angular
            float64 x
            float64 y
            float64 z


-------------

Now that you have the message structure, you can publish data 
onto a topic directly from the command line using:

ros2 topic pub <topic_name> <msg_type> '<args>'
The '<args>' argument is the actual data you’ll pass to the 
topic, in the structure you just discovered in the previous section.

It’s important to note that this argument needs to be input in 
YAML syntax. Input the full command like so:

ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist 
"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 2.0, y: 0.0, z: 0.0} }"

--once is an optional argument meaning “publish one message then exit”.

ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist 
"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
The difference here is the removal of the --once option and the addition 
of the --rate 1 option, which tells ros2 topic pub to publish the command 
in a steady stream at 1 Hz.

--------------

For one last introspection on this process, you can view the rate at which data is published using:

ros2 topic hz /turtle1/pose

-------------

ros2 service type <service_name>

To see the types of all the active services at the same time, you can append the 
--show-types option, abbreviated as -t, to the list command:

ros2 service list -t

ros2 service find <type_name>

ros2 interface show std_srvs/srv/Empty
Which will return:

---

The --- separates the request structure (above) from the response structure (below). 
But, as you learned earlier, the Empty type doesn’t send or receive any data

ros2 service call <service_name> <service_type> <arguments>

ros2 service call /spawn turtlesim/srv/Spawn "{x: 2, y: 2, theta: 0.2, name: ''}"

requester: making request: turtlesim.srv.Spawn_Request(x=2.0, y=2.0, theta=0.2, name='')

response:
turtlesim.srv.Spawn_Response(name='turtle2')

----------------

ros2 param list

To display the type and current value of a parameter, use the command:
ros2 param get <node_name> <parameter_name>

To change a parameter’s value at runtime, use the command:
ros2 param set <node_name> <parameter_name> <value>

Setting parameters with the set command will only change them in your current session, not permanently.

You can “dump” all of a node’s current parameter values into a file to save them for later by using the command:
ros2 param dump <node_name>

To save your current configuration of /turtlesim’s parameters, enter the command:
ros2 param dump /turtlesim

You can load parameters from a file to a currently running node using the command:
ros2 param load <node_name> <parameter_file>

To load the ./turtlesim.yaml file generated with ros2 param dump into /turtlesim node’s parameters, enter the command:
ros2 param load /turtlesim ./turtlesim.yaml

To start the same node using your saved parameter values, use:
ros2 run <package_name> <executable_name> --ros-args --params-file <file_name>

--------------------

To see the /turtlesim node’s actions, open a new terminal and run the command:
ros2 node info /turtlesim

To identify all the actions in the ROS graph, run the command:
ros2 action list -t

You can further introspect the /turtle1/rotate_absolute action with the command:
ros2 action info /turtle1/rotate_absolute

Which will return:

The desired heading in radians
float32 theta
---
The angular displacement in radians to the starting position
float32 delta
---
The remaining rotation in radians
float32 remaining

The first section of this message, above the ---, is the structure (data type and name) of the goal 
request. The next section is the structure of the result. 
The last section is the structure of the feedback.

Now let’s send an action goal from the command line with the following syntax:

ros2 action send_goal <action_name> <action_type> <values>
<values> need to be in YAML format.

ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 1.57}" --feedback

You will continue to receive feedback, the remaining radians, until the goal is complete.

---------------------

rqt_console is a GUI tool used to introspect log messages in ROS 2

The first section of the console is where log messages from your system will display.

In the middle you have the option to filter messages by excluding severity levels. 
You can also add more exclusion filters using the plus-sign button to the right.

The bottom section is for highlighting messages that include a string you input. 
You can add more filters to this section as well.


---------------

There is no exact standard for what each level indicates, but it’s safe to assume that:

Fatal messages indicate the system is going to terminate to try to protect itself 
from detriment.

Error messages indicate significant issues that won’t necessarily damage the system, 
but are preventing it from functioning properly.

Warn messages indicate unexpected activity or non-ideal results that might represent 
a deeper issue, but don’t harm functionality outright.

Info messages indicate event and status updates that serve as a visual verification 
that the system is running as expected.

Debug messages detail the entire step-by-step process of the system execution.

The default level is Info

You can set the default logger level when you first run the /turtlesim node using remapping. 
Enter the following command in your terminal:

ros2 run turtlesim turtlesim_node --ros-args --log-level WARN


-------------------------

# launch/turtlesim_mimic_launch.py

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='turtlesim',
            namespace='turtlesim1',
            executable='turtlesim_node',
            name='sim'
        ),
        Node(
            package='turtlesim',
            namespace='turtlesim2',
            executable='turtlesim_node',
            name='sim'
        ),
        Node(
            package='turtlesim',
            executable='mimic',
            name='mimic',
            remappings=[
                ('/input/pose', '/turtlesim1/turtle1/pose'),
                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'),
            ]
        )
    ])

Note the only difference between the two nodes is their namespace values. 
Unique namespaces allow the system to start two simulators without node name 
nor topic name conflicts.

Both turtles in this system receive commands over the same topic and publish 
their pose over the same topic. Without unique namespaces, there would be no 
way to distinguish between 
messages meant for one turtle or the other.

cd launch
ros2 launch turtlesim_mimic_launch.py

It is possible to launch a launch file directly (as we do above), or provided by a package. 
When it is provided by a package, the syntax is:

ros2 launch <package_name> <launch_file_name>

-----------------------

mkdir bag_files
cd bag_files

ros2 bag record <topic_name>

make sure you are in /bag_files then:

ros2 bag record /turtle1/cmd_vel

ros2 bag record -o subset /turtle1/cmd_vel /turtle1/pose
The -o option allows you to choose a unique name for your bag file. The following string, 
in this case subset, is the file name.

ros2 bag info subset
Files:             subset.db3
Bag size:          228.5 KiB
Storage id:        sqlite3
Duration:          48.47s
Start:             Oct 11 2019 06:09:09.12 (1570799349.12)
End                Oct 11 2019 06:09:57.60 (1570799397.60)
Messages:          3013
Topic information: Topic: /turtle1/cmd_vel | Type: geometry_msgs/msg/Twist | Count: 9 | Serialization Format: cdr
                 Topic: /turtle1/pose | Type: turtlesim/msg/Pose | Count: 3004 | Serialization Format: cdr

ros2 bag play subset

[INFO] [rosbag2_storage]: Opened database 'subset'.

--------------------

Your main ROS 2 installation will be your underlay for this tutorial. 
(Keep in mind that an underlay does not necessarily have to be the main ROS 2 installation.)

5 Build the workspace with colcon

from \dev_ws (root of the workspace) and in vs studio cmd prompt as admin
colcon build --merge-install --symlink-install
!!!! TIVE PROBLEMA DE PERMISSON DENIED (AINDA NAO RESOLVIDO) AQUI

Other useful arguments for colcon build:

--packages-up-to builds the package you want, plus all its dependencies, but not the whole workspace (saves time)

--symlink-install saves you from having to rebuild every time you tweak python scripts

--event-handlers console_direct+ shows console output while building (can otherwise be found in the log directory)

-----

6 Source the overlay
Before sourcing the overlay, it is very important that you open a new terminal, 
separate from the one where you built the workspace. Sourcing an overlay in the 
same terminal where you built, or likewise building where an overlay is sourced, may create complex issues.

In the new terminal, source your main ROS 2 environment as the “underlay”, so you can build the overlay “on top of” it:

underlay:
call ros2dev.bat

overlay:
call install/setup.bat


----------------

1 Create a package

ros2 pkg create --build-type ament_python <package_name>

2 build specific packages

colcon build --symlink-install --packages-select my_package 

open !!OTHER!! terminal and:

3 Source the setup file
3.1 source main ros2 intallation
3.2 source you worskspace 

4 Use the package
ros2 run my_package my_node

From dev_ws/src/my_package, open package.xml using your preferred text editor:

Input your name and email on the maintainer line if it hasn’t been automatically 
populated for you. Then, edit the description line to summarize the package:

<description>Beginner client libraries tutorials practice package</description>
Then update the license line. You can read more about open source licenses here. 
Since this package is only for practice, it’s safe to use any license.
 We use Apache License 2.0:

<license>Apache License 2.0</license>
Don’t forget to save once you’re done editing.

Below the license tag, you will see some tag names ending with _depend. 
This is where your package.xml would list its dependencies on other packages, 
for colcon to search for. my_package is simple and doesn’t have any dependencies, 
but you will see this space being utilized in upcoming tutorials.

The setup.py file contains the same description, maintainer and license fields as 
package.xml, so you need to set those as well. They need to match exactly in both 
files. The version and name (package_name) also need to match exactly, and should 
be automatically populated in both files.


------------------------

Writing a simple publisher and subscriber (Python)


1. Publisher code

# publisher_member_function.py

import rclpy
from rclpy.node import Node

from std_msgs.msg import String


class MinimalPublisher(Node):

    def __init__(self):
        super().__init__('minimal_publisher')
        self.publisher_ = self.create_publisher(String, 'topic', 10)
        timer_period = 0.5  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.i = 0

    def timer_callback(self):
        msg = String()
        msg.data = 'Hello World: %d' % self.i
        self.publisher_.publish(msg)
        self.get_logger().info('Publishing: "%s"' % msg.data)
        self.i += 1


def main(args=None):
    rclpy.init(args=args)

    minimal_publisher = MinimalPublisher()

    rclpy.spin(minimal_publisher)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    minimal_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

1.1 Add depencencies

Navigate one level back to the dev_ws/src/py_pubsub directory
Open package.xml with your text editor.

<exec_depend>rclpy</exec_depend>
<exec_depend>std_msgs</exec_depend>

1.2 Add entry point

Open the setup.py file.

entry_points={
        'console_scripts': [
                'talker = py_pubsub.publisher_member_function:main',
        ],
},


1.3 Check setup.cfg
The contents of the setup.cfg file should be correctly populated automatically, like so:

[develop]
script-dir=$base/lib/py_pubsub
[install]
install-scripts=$base/lib/py_pubsub
This is simply telling setuptools to put your executables in lib, because ros2 run will look for them there.

2. Subscribers

# subscriber_member_function.py

import rclpy
from rclpy.node import Node

from std_msgs.msg import String

class MinimalSubscriber(Node):

    def __init__(self):
        super().__init__('minimal_subscriber')
        self.subscription = self.create_subscription(
            String,
            'topic',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        self.get_logger().info('I heard: "%s"' % msg.data)


def main(args=None):
    rclpy.init(args=args)

    minimal_subscriber = MinimalSubscriber()

    rclpy.spin(minimal_subscriber)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    minimal_subscriber.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

2.1 Add an entry point

entry_points={
        'console_scripts': [
                'talker = py_pubsub.publisher_member_function:main',
                'listener = py_pubsub.subscriber_member_function:main',
        ],
},

--------------------------------------

Writing a simple service and client (Python)

Navigate into dev_ws/src and create a new package:

ros2 pkg create --build-type ament_python py_srvcli --dependencies rclpy example_interfaces
Your terminal will return a message verifying the creation of 
your package py_srvcli and all its necessary files and folders.

The --dependencies argument will automatically add the necessary 
dependency lines to package.xml. example_interfaces is the package 
that includes the .srv file


1. Service Node

Inside the dev_ws/src/py_srvcli/py_srvcli directory, create a new file called service_member_function.py and paste the following code within:

from example_interfaces.srv import AddTwoInts

import rclpy
from rclpy.node import Node


class MinimalService(Node):

    def __init__(self):
        super().__init__('minimal_service')
        self.srv = self.create_service(AddTwoInts, 'add_two_ints', self.add_two_ints_callback)

    def add_two_ints_callback(self, request, response):
        response.sum = request.a + request.b
        self.get_logger().info('Incoming request\na: %d b: %d' % (request.a, request.b))

        return response


def main():
    rclpy.init()

    minimal_service = MinimalService()

    rclpy.spin(minimal_service)

    rclpy.shutdown()


if __name__ == '__main__':
    main()

1.1 Add entry to the

To allow the ros2 run command to run your node, you must add the entry point 
to setup.py (located in the dev_ws/src/py_srvcli directory).

Add the following line between the 'console_scripts': brackets:
'service = py_srvcli.service_member_function:main',

2. Client Node

Inside the dev_ws/src/py_srvcli/py_srvcli directory, create a new file called client_member_function.py and paste the following code within:

import sys

from example_interfaces.srv import AddTwoInts
import rclpy
from rclpy.node import Node


class MinimalClientAsync(Node):

    def __init__(self):
        super().__init__('minimal_client_async')
        self.cli = self.create_client(AddTwoInts, 'add_two_ints')
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('service not available, waiting again...')
        self.req = AddTwoInts.Request()

    def send_request(self):
        self.req.a = int(sys.argv[1])
        self.req.b = int(sys.argv[2])
        self.future = self.cli.call_async(self.req)


def main():
    rclpy.init()

    minimal_client = MinimalClientAsync()
    minimal_client.send_request()

    while rclpy.ok():
        rclpy.spin_once(minimal_client)
        if minimal_client.future.done():
            try:
                response = minimal_client.future.result()
            except Exception as e:
                minimal_client.get_logger().info(
                    'Service call failed %r' % (e,))
            else:
                minimal_client.get_logger().info(
                    'Result of add_two_ints: for %d + %d = %d' %
                    (minimal_client.req.a, minimal_client.req.b, response.sum))
            break

    minimal_client.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

Entry Points
The entry_points field of your setup.py file should look like this:

entry_points={
    'console_scripts': [
        'service = py_srvcli.service_member_function:main',
        'client = py_srvcli.client_member_function:main',
    ],
},

----------------------------

# Custom Interfaces:


1 example of .msg file in ./msg directory of the pkg:

uint8 x 42
int16 y -2000
string full_name "John Doe"
int32[] samples [-200, -100, 0, 100, 200]

2 example of .srv file in ./srv directory of the pkg:

#request constants
int8 FOO=1
int8 BAR=2
#request fields
int8 foobar
another_pkg/AnotherMessage msg
---
#response constants
uint32 SECRET=123456
#response fields
another_pkg/YetAnotherMessage val
CustomMessageDefinedInThisPackage value
uint32 an_integer


ros2 pkg create --build-type ament_cmake tutorial_interfaces

tutorial_interfaces is the name of the new package. 
Note that it is a CMake package; there currently isn’t a way to generate 
a .msg or .srv file in a pure Python package. You can create a custom 
interface in a CMake package, and then use it in a Python node, which 
will be covered in the last section.

It is good practice to keep .msg and .srv files in their own directories within a package. 
Create the directories in dev_ws/src/tutorial_interfaces:

mkdir msg

mkdir srv

In the tutorial_interfaces/msg directory you just created, make a new file called Num.msg with 
one line of code declaring its data structure:
int64 num

Back in the tutorial_interfaces/srv directory you just created, make a new file called AddThreeInts.srv with the following request and response structure:
int64 a
int64 b
int64 c
---
int64 sum


3 CMakeLists.txt
To convert the interfaces you defined into language-specific code (like C++ and Python) 
so that they can be used in those languages, add the following lines to CMakeLists.txt:

find_package(rosidl_default_generators REQUIRED)

rosidl_generate_interfaces(${PROJECT_NAME}
  "msg/Num.msg"
  "srv/AddThreeInts.srv"
 )

Because the interfaces rely on rosidl_default_generators for generating language-specific code, 
you need to declare a dependency on it. Add the following lines to package.xml

<build_depend>rosidl_default_generators</build_depend>
<exec_depend>rosidl_default_runtime</exec_depend>
<member_of_group>rosidl_interface_packages</member_of_group>

5 Build the tutorial_interfaces package
Now that all the parts of your custom interfaces package are in place, you can build the package. In the root of your workspace (~/dev_ws), run the following command:

Windows
colcon build --merge-install --packages-select tutorial_interfaces

7.1 Testing Num.msg with pub/sub

7.1.1 Publisher:

import rclpy
from rclpy.node import Node

from tutorial_interfaces.msg import Num                            # CHANGE


class MinimalPublisher(Node):

    def __init__(self):
        super().__init__('minimal_publisher')
        self.publisher_ = self.create_publisher(Num, 'topic', 10)  # CHANGE
        timer_period = 0.5
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.i = 0

    def timer_callback(self):
        msg = Num()                                                # CHANGE
        msg.num = self.i                                           # CHANGE
        self.publisher_.publish(msg)
        self.get_logger().info('Publishing: "%d"' % msg.num)       # CHANGE
        self.i += 1


def main(args=None):
    rclpy.init(args=args)

    minimal_publisher = MinimalPublisher()

    rclpy.spin(minimal_publisher)

    minimal_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

7.1.2 Subscriber:

import rclpy
from rclpy.node import Node

from tutorial_interfaces.msg import Num                        # CHANGE


class MinimalSubscriber(Node):

    def __init__(self):
        super().__init__('minimal_subscriber')
        self.subscription = self.create_subscription(
            Num,                                               # CHANGE
            'topic',
            self.listener_callback,
            10)
        self.subscription

    def listener_callback(self, msg):
            self.get_logger().info('I heard: "%d"' % msg.num)  # CHANGE


def main(args=None):
    rclpy.init(args=args)

    minimal_subscriber = MinimalSubscriber()

    rclpy.spin(minimal_subscriber)

    minimal_subscriber.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

7.1.3 package.xml:

<exec_depend>tutorial_interfaces</exec_depend>

7.1.4 Build

colcon build --merge-install --symlink-install --packages-select py_pubsub

---------------

7.2 Testing AddThreeInts.srv with service/client

7.2.1 Service:

from tutorial_interfaces.srv import AddThreeInts                                                           # CHANGE

import rclpy
from rclpy.node import Node


class MinimalService(Node):

    def __init__(self):
        super().__init__('minimal_service')
        self.srv = self.create_service(AddThreeInts, 'add_three_ints', self.add_three_ints_callback)       # CHANGE

    def add_three_ints_callback(self, request, response):
        response.sum = request.a + request.b + request.c                                                   # CHANGE
        self.get_logger().info('Incoming request\na: %d b: %d c: %d' % (request.a, request.b, request.c))  # CHANGE

        return response

def main(args=None):
    rclpy.init(args=args)

    minimal_service = MinimalService()

    rclpy.spin(minimal_service)

    rclpy.shutdown()

if __name__ == '__main__':
    main()

7.2.2 Client:


from tutorial_interfaces.srv import AddThreeInts                            # CHANGE
import sys
import rclpy
from rclpy.node import Node


class MinimalClientAsync(Node):

    def __init__(self):
        super().__init__('minimal_client_async')
        self.cli = self.create_client(AddThreeInts, 'add_three_ints')       # CHANGE
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('service not available, waiting again...')
        self.req = AddThreeInts.Request()                                   # CHANGE

    def send_request(self):
        self.req.a = int(sys.argv[1])
        self.req.b = int(sys.argv[2])
        self.req.c = int(sys.argv[3])                                       # CHANGE
        self.future = self.cli.call_async(self.req)


def main(args=None):
    rclpy.init(args=args)

    minimal_client = MinimalClientAsync()
    minimal_client.send_request()

    while rclpy.ok():
        rclpy.spin_once(minimal_client)
        if minimal_client.future.done():
            try:
                response = minimal_client.future.result()
            except Exception as e:
                minimal_client.get_logger().info(
                    'Service call failed %r' % (e,))
            else:
                minimal_client.get_logger().info(
                    'Result of add_three_ints: for %d + %d + %d = %d' %                                # CHANGE
                    (minimal_client.req.a, minimal_client.req.b, minimal_client.req.c, response.sum))  # CHANGE
            break

    minimal_client.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()



7.2.3 and 7.2.4 are the same as 7.1.3. and 7.1.4

-------------------------------

Using parameters in a class (Python)

nside the dev_ws/src/python_parameters/python_parameters directory, create a new file called python_parameters_node.py and paste the following code within:

import rclpy
import rclpy.node
from rclpy.exceptions import ParameterNotDeclaredException
from rcl_interfaces.msg import ParameterType

class MinimalParam(rclpy.node.Node):
    def __init__(self):
        super().__init__('minimal_param_node')
        timer_period = 2  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)

        self.declare_parameter('my_parameter', 'world')

    def timer_callback(self):
        my_param = self.get_parameter('my_parameter').get_parameter_value().string_value

        self.get_logger().info('Hello %s!' % my_param)

        my_new_param = rclpy.parameter.Parameter(
            'my_parameter',
            rclpy.Parameter.Type.STRING,
            'world'
        )
        all_new_parameters = [my_new_param]
        self.set_parameters(all_new_parameters)

def main():
    rclpy.init()
    node = MinimalParam()
    rclpy.spin(node)

if __name__ == '__main__':
    main()

--------

3.1 Change via the console


Open another terminal, source the setup files from inside dev_ws again, and enter the following line:

ros2 param list
There you will see the custom parameter my_parameter. 
To change it simply run the following line in the console:

ros2 param set /minimal_param_node my_parameter earth
You know it went well if you get the output Set parameter 
successful. If you look at the other terminal, you should 
see the output change to [INFO] [minimal_param_node]: Hello earth!
You know it went well if you get the output Set parameter 
successful. If you look at the other terminal, you should 
see the output change to [INFO] [minimal_param_node]: Hello earth!


3.2 Change via a launch file

ou can also set parameters in a launch file, but first you will need to add a launch directory. Inside the dev_ws/src/python_parameters/ directory, create a new directory called launch. In there, create a new file called python_parameters_launch.py

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='python_parameters',
            executable='param_talker',
            name='custom_parameter_node',
            output='screen',
            emulate_tty=True,
            parameters=[
                {'my_parameter': 'earth'}
            ]
        )
    ])
Here you can see that we set my_parameter to earth when we launch our node parameter_node. By adding the two lines below, we ensure our output is printed in our console.

output="screen",
emulate_tty=True,

Now open the setup.py file. Add the import statements to the top of the file, and the other new statement to the data_files parameter to include all launch files:

import os
from glob import glob
# ...

setup(
  # ...
  data_files=[
      # ...
      (os.path.join('share', package_name), glob('launch/*_launch.py')),
    ]
  )


then:

colcon build --merge-install --symlink-install --packages-select python_parameters

call install/setup.bat

ros2 launch python_parameters python_parameters_launch.py

--------------------

Getting started with ros2doctor

1 Check your setup

ros2 doctor

To get a full report, enter the following command in the terminal:

ros2 doctor --report

---------------------------------------

Launching/monitoring multiple nodes with Launch

Writing the launch file
Inside your launch directory, create a new launch file with the .launch.py suffix. 
For example my_script.launch.py.

.launch.py is not specifically required as the file suffix for launch files. 
Another popular option is _launch.py, 
used in the beginner level launch files tutorial. If you do change the suffix, 
make sure to adjust the glob() 
argument in your setup.py file accordingly


--------------------------------

Using colcon to build packages

If you do not want to build a specific package place an empty file named 
COLCON_IGNORE in the directory and it will not be indexed.

