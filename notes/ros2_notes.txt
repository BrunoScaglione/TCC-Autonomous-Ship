ros2 node list
ros2 topic list -t

ros2 topic list -t will return the same list of topics, 
this time with the topic type appended in brackets

ros2 service list -t
ros2 action list

----------------

ros2 run <package_name> <executable_name>

----------------

Remapping allows you to reassign default node properties, 
like node name, topic names, service names, etc., to custom values.

Now, lets reassign the name of our /turtlesim node

ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle

----------------

ros2 node info <node_name>

ros2 node info returns a list of subscribers, publishers, services, 
and actions (the ROS graph connections) that interact with that node

-----------

names of nodes not necessarily = name of executable_name

ros2 run turtlesim turtle_teleop_key
Recall from the previous tutorial that the names of these nodes are 
/turtlesim and /teleop_turtle by default.

-------------

rqt 

ou can also open rqt_graph by opening rqt 
and selecting Plugins > Introspection > Node Graph.

rqt_graph


---------------

To see the data being published on a topic, use:

ros2 topic echo <topic_name>

/_ros2cli_26646 is the node created by the echo we just ran (the number might be different). 
Now you can see that the publisher is 
publishing data over the cmd_vel topic, and two subscribers are subscribed


ros2 topic info /turtle1/cmd_vel
Which will return:

Type: geometry_msgs/msg/Twist
Publisher count: 1
Subscription count: 2

------------------

geometry_msgs/msg/Twist
This means that in the package geometry_msgs there is a msg called Twist.

ros2 interface show geometry_msgs/msg/Twist
For the message type from above it yields:

This expresses velocity in free space broken into its linear and angular parts.

    Vector3  linear
            float64 x
            float64 y
            float64 z
    Vector3  angular
            float64 x
            float64 y
            float64 z


-------------

Now that you have the message structure, you can publish data 
onto a topic directly from the command line using:

ros2 topic pub <topic_name> <msg_type> '<args>'
The '<args>' argument is the actual data you’ll pass to the 
topic, in the structure you just discovered in the previous section.

It’s important to note that this argument needs to be input in 
YAML syntax. Input the full command like so:

ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist 
"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0

--once is an optional argument meaning “publish one message then exit”.

ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist 
"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
The difference here is the removal of the --once option and the addition 
of the --rate 1 option, which tells ros2 topic pub to publish the command 
in a steady stream at 1 Hz.

--------------

For one last introspection on this process, you can view the rate at which data is published using:

ros2 topic hz /turtle1/pose

