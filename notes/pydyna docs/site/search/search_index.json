{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pydyna An API (Application Programming Interface) for interacting with the core of the TPN numerical engine via Python. Installation Since the API is distributed as a wheel file, for installing the package in Python one should run the following line at the command prompt: pip install pydyna_7_2_3-py3-none-any.whl Dependencies See requirements.txt file for a list of all packages dependencies or run the following line at the command prompt to get all the necessary packages installed: pip install -r requirements.txt Usage Next script shows a simple example of running a simulation of a vessel while giving 35 degrees of rudder and maximum throttle at the main propeller. Example 1: a simple simulation import pydyna import math print('Loading...') try: sim = pydyna.create_simulation() ship = sim.vessels['0'] rudder = ship.rudders['0'] rudder.dem_angle = math.radians(35) propeller = ship.thrusters['0'] propeller.dem_rotation = propeller.max_rotation steps = 1000 for i in range(0, steps): print('Step: ' + str(i)) sim.step() pydyna.destroy_simulation(sim) except: print('Error loading simulation!') Example 2: visualization with Venus import pydyna import venus.viewer import venus.helpers import venus.objects import math sim = pydyna.create_simulation('Container_355_51_145.p3d') if sim: viewer = venus.viewer.Venus() ANGRA_DOS_REIS = venus.objects.GeoPos(-23.06255, -44.2772) viewer.set_viewport(ANGRA_DOS_REIS, 15) ship = sim.vessels['30'] rudder = ship.rudders['0'] propeller = ship.thrusters['0'] propeller.dem_rotation = propeller.max_rotation rudder.dem_angle = math.radians(10) ship_view = venus.objects.Vessel(position = venus.helpers.RelPos(ship.linear_position[0], ship.linear_position[1]).to_geo(ANGRA_DOS_REIS), angle = 90 - math.degrees(ship.angular_position[2]), size = venus.objects.Size(40, 120)) viewer.add(ship_view) steps = 10000 for i in range(1, steps): print('Step ' + str(i)) sim.step() ship_view.position = venus.helpers.RelPos(ship.linear_position[0], ship.linear_position[1]).to_geo(ANGRA_DOS_REIS) ship_view.angle = 90 - math.degrees(ship.angular_position[2]) pydyna.destroy_simulation(sim)","title":"Home"},{"location":"#pydyna","text":"An API (Application Programming Interface) for interacting with the core of the TPN numerical engine via Python.","title":"pydyna"},{"location":"#installation","text":"Since the API is distributed as a wheel file, for installing the package in Python one should run the following line at the command prompt: pip install pydyna_7_2_3-py3-none-any.whl","title":"Installation"},{"location":"#dependencies","text":"See requirements.txt file for a list of all packages dependencies or run the following line at the command prompt to get all the necessary packages installed: pip install -r requirements.txt","title":"Dependencies"},{"location":"#usage","text":"Next script shows a simple example of running a simulation of a vessel while giving 35 degrees of rudder and maximum throttle at the main propeller.","title":"Usage"},{"location":"#example-1-a-simple-simulation","text":"import pydyna import math print('Loading...') try: sim = pydyna.create_simulation() ship = sim.vessels['0'] rudder = ship.rudders['0'] rudder.dem_angle = math.radians(35) propeller = ship.thrusters['0'] propeller.dem_rotation = propeller.max_rotation steps = 1000 for i in range(0, steps): print('Step: ' + str(i)) sim.step() pydyna.destroy_simulation(sim) except: print('Error loading simulation!')","title":"Example 1: a simple simulation"},{"location":"#example-2-visualization-with-venus","text":"import pydyna import venus.viewer import venus.helpers import venus.objects import math sim = pydyna.create_simulation('Container_355_51_145.p3d') if sim: viewer = venus.viewer.Venus() ANGRA_DOS_REIS = venus.objects.GeoPos(-23.06255, -44.2772) viewer.set_viewport(ANGRA_DOS_REIS, 15) ship = sim.vessels['30'] rudder = ship.rudders['0'] propeller = ship.thrusters['0'] propeller.dem_rotation = propeller.max_rotation rudder.dem_angle = math.radians(10) ship_view = venus.objects.Vessel(position = venus.helpers.RelPos(ship.linear_position[0], ship.linear_position[1]).to_geo(ANGRA_DOS_REIS), angle = 90 - math.degrees(ship.angular_position[2]), size = venus.objects.Size(40, 120)) viewer.add(ship_view) steps = 10000 for i in range(1, steps): print('Step ' + str(i)) sim.step() ship_view.position = venus.helpers.RelPos(ship.linear_position[0], ship.linear_position[1]).to_geo(ANGRA_DOS_REIS) ship_view.angle = 90 - math.degrees(ship.angular_position[2]) pydyna.destroy_simulation(sim)","title":"Example 2: visualization with Venus"},{"location":"API/","text":"pydyna create_simulation create_simulation(*args) This function is the main API entry-point to create a new Simulation session. Parameters p3d_or_json_file [optional] (string) : the p3d or json filename containing the hydrodynamics model description to be loaded. If not provided, loads a default hydrodynamics model. Returns Simulation destroy_simulation destroy_simulation(sim) This function terminates a Simulation session. Parameters sim (Simulation) : the simulation instance to destroy Simulation Simulation(self, *args, **kwargs) Main class to interact with a simulation. Use create_simulation() and destroy_simulation() for instance creation/deletion. catenaries Property (CatenaryDict): Dictionary of catenaries (id : Caternary) current Property (Current): Environment current dt Property (float): Time interval for the integration step (s) fenders Property (FenderDict): Dictionary of fenders (id : Fender) line_ordering Property (string List): Original ordering of the lines as encountered in the P3d file max_steps Property (int): Number of steps to integrate in fast-time mode p3d_file Property (string): P3d file used to generate this simulation thisown The membership flag time_step Property (int): Current integration time step vessels Property (VesselDict): Dictionary of vessels Keys: (id : Vessel) wave Property (Wave): Environment wave wind Property (Wind): Environment wind step Simulation.step(self) Runs an integration step. reset Simulation.reset(self) Resets the simulation to the initial condition just after it has been created. Vessel Vessel(self, *args, **kwargs) Models an ownship with its hydrodynamical properties. anchors Property (AnchorDict): Dictionary of anchors (id : Anchor) attached to this Vessel angular_acceleration Property (float[3]): Angular acceleration (rad/s^2) angular_position Property (float[3]): Angular position (counter-clockwise radians) angular_velocity Property (float[3]): Angular velocity (rad/s) breadth Property (float): breadth (m) draught Property (float): draught (m) external_forces Property (ForceDict): Dictionary of external forces (id : Force) acting on this Vessel height Property (float): height (m) id Property (string): Vessel identification internal_forces Property (ForceDict): Dictionary of internal forces (id : Force) acting on this Vessel Force id can be one of the following built-in values: \"wave1stOrder\", \"waveMeanDrift\", \"waveSlowDrift\", \"waveDriftDamp\", \"swell1stOrder\", \"swellMeanDrift\", \"swellSlowDrift\", \"swellDriftDamp\", \"thrusters\", \"sheer\", \"rudders\", \"externalForces\", \"wind\", \"current\", \"lines\", \"hydrostaticRestoration\", \"towing\", \"squatting\", \"straitChannels\", \"damping\", \"inertial\", \"interactions\" length Property (float): length (m) linear_acceleration Property (float[3]): Keel Midship (KMS) local acceleration (m/s^2) linear_position Property (float[3]): Keel Midship (KMS) position (m) linear_velocity Property (float[3]): Keel Midship (KMS) local velocity (m/s) mass Property (float): mass (t) rudders Property (RudderDict): Dictionary of rudders (id : Rudder) attached to this Vessel thisown The membership flag thrusters Property (ThrusterDict): Dictionary of thrusters (id : Thruster) attached to this Vessel volume Property (float): volume (m^3) water_velocity Property (float[3]): Local current velocity relative to the vessel-fixed coordinate system (m/s) weight Property (float): weight (kN) wind_velocity Property (float[3]): Global wind velocity (m/s) Rudder Rudder(self, *args, **kwargs) Models the hidrodynamics of a rudder attached to a Vessel . dem_angle Property (float): Rudder demanded angle (counter-clockwise radians) eff_angle Property (float): Rudder effective angle (counter-clockwise radians) id Property (string): Rudder identification max_angle Property (float): Rudder maximum angle (counter-clockwise radians) thisown The membership flag Thruster Thruster(self, *args, **kwargs) Models the hidrodynamics of a propeller attached to a Vessel . calc_rot_dynamics Property (bool): True if the rotation dynamics is to be calculated or False if it's calculated elsewhere dem_angle Property (float): Thruster demanded azimuthal angle (counter-clockwise radians) dem_pitch Property (float): Thruster demanded pitch (adimensional) dem_power Property (float): Thruster demanded power (kW) dem_rotation Property (float): Thruster demanded rotation (RPS) dem_thrust Property (float): Thruster demanded thrust (kN) eff_angle Property (float): Thruster effective azimuthal angle (counter-clockwise radians) eff_pitch Property (float): Thruster effective pitch (adimensional) eff_power Property (float): Thruster effective power (kW) eff_rotation Property (float): Thruster effective rotation (RPS) eff_thrust Property (float): Thruster effective thrust (kN) id Property (string): Thruster identification max_angle Property (float): Thruster maximum azimuthal angle (counter-clockwise radians) max_pitch Property (float): Thruster maximum pitch (adimensional) max_power Property (float): Thruster maximum power (kW) max_rotation Property (float): Thruster maximum rotation (RPS) max_thrust Property (float): Thruster maximum thrust (kN) thisown The membership flag torque Property (float): Thruster torque (kNm) vessel Parent vessel -> Vessel water_velocity Property (float[3]): Water velocity in the local system of reference (m/s) Anchor Anchor(self, *args, **kwargs) Models the hydrodynamics of an anchor in a Vessel . active Property (bool): Anchor activation state chain_max_length Property (float): Anchor maximum chain length (m) depth Property (float): Anchor depth (m) holding_power Property (float): Anchor holding power (kN) id Property (string): Anchor identification thisown The membership flag weight Property (float): Anchor weight (kN) winch_brake_capacity Property (float): Anchor winch brake capacity (kN) winch_lift_capacity Property (float): Anchor winch lift capacity (kN) winch_speed Property (float): Anchor dropping (negative values) or raising (positive values) winch speed (m/s) Force Force(self, *args, **kwargs) Models the application of a force to a Vessel . force Property (float[3]): Force vector (kN) id Property (string): Force identification moment Property (float[3]): Force moment (kN) point Property (float[3]): Force point of reference (local position with reference to the vessel Wamit center) thisown The membership flag Endpoint Endpoint(self, *args, **kwargs) Models a point of interaction with a Vessel . force Property (Force): Reference to the Force at the end of this interaction Endpoint (cannot be None) position Property (float[3]): Position of this interaction Endpoint in the global frame of reference (m) thisown The membership flag velocity Property (float[3]): Velocity of this interaction Endpoint in the global frame of reference (m/s) vessel Property (Vessel): Reference to the Vessel at the end of this interaction Endpoint (can be None) Catenary Catenary(self, *args, **kwargs) Models the hydrodynamics of a catenary line connected to a Vessel(s) . active Property (bool): Line activation state endpoint_a Property (Endpoint): Interaction endpoint A endpoint_b Property (Endpoint): Interaction endpoint B id Property (string): Catenary identification length Property (float): Line length thisown The membership flag Fender Fender(self, *args, **kwargs) Models the hydrodynamics of a fender acting on a Vessel . active Property (bool): Fender activation state endpoint_a Property (Endpoint): Interaction endpoint A endpoint_b Property (Endpoint): Interaction endpoint B id Property (string): Fender identification length Property (float): Line length thisown The membership flag Wind Wind(self, *args, **kwargs) Models the dynamics of an environment wind which acts on the Vessel(s) being simulated. spectrum_angle Property (float): Wind spectrum angle parameter (counter-clockwise radians) spectrum_type Property (string): Wind spectrum type Can be one of the following values: \"HARRIS\", \"WILLS\", \"REGULAR\", \"API\", \"NPD\", \"OCHISHIN\", \"DAVENPORT\", \"QUEUFFEULOU\" or \"KAIMAL\" spectrum_velocity Property (float): Wind spectrum velocity parameter (m/s) thisown The membership flag get_velocity Wind.get_velocity(self, t, in_vec) Evaluates the wind velocity at time t and position (x, y, z). Parameters t (float) : the time (t) pos (float[3]) : the position in global coordinates (m) Returns `float[3] `: global velocity (m/s) Current Current(self, *args, **kwargs) Models the dynamics of a water current which acts on the Vessel(s) being simulated. field_axis_x Property(float[n]) : position x-component (m) of the current field field_axis_y Property(float[m]) : position y-component (m) of the current field field_velocity_x Property(float[n*m]) : velocity x-component (m/s) of the current field field_velocity_y Property(float[n*m]) : velocity y-component (m/s) of the current field gain Property (float): Multiplier for the velocity (adimensional) profile_angle Property(float[n]) : angle (rad) of the corresponding profile depths profile_depth Property(float[n]) : depth values (m) of the current profile profile_velocity Property(float[n]) : velocity (m/s) of the corresponding profile depths thisown The membership flag get_velocity Current.get_velocity(self, t, in_vec) Evaluates the current velocity at time t and position (x, y, z). Parameters t (float) : the time (s) pos (float[3]) : the position in global coordinates (m) Returns `float[3] `: global velocity (m/s) Wave Wave(self, *args, **kwargs) Models the dynamics of a wave in the water which acts on the Vessel(s) being simulated. field_angle Property(float[n*m]) : angles (rad) of the wave field field_axis_x Property(float[n]) : position x-component (m) of the wave field field_axis_y Property(float[m]) : position y-component (m) of the wave field field_multiplier Property(float[n*m]) : multipliers (adimensional) of the wave field thisown The membership flag get_height Wave.get_height(self, t, in_vec) Evaluates the wave height at time t and position (x, y). Parameters t (float) : the time (s) pos (float[2]) : the position in global coordinates (m) Returns `float `: the wave height (m) create_text_report create_text_report(filename) Creates a text-based Report . Parameters filename (string) : the report filename to be written Returns Report destroy_report destroy_report(report) Finishes a Report printing. Parameters report (Report) : the report instance to destroy Report Report(self, *args, **kwargs) Main class to create a text report. See create_report() and ``destroy_report()\" functions. filename Report filename -> string thisown The membership flag write Report.write(self, *args) Overload 1: Prints Vessel data (including rudders, thrusters, forces) for time t. Parameters t (float) : the time (s) e (Vessel) : the vessel instance with its subobjects to be printed | __ Overload 2__: Prints Catenary line data for time t. Parameters t (float) : the time (s) e (Catenary) : the line instance with its subobjects to be printed | __ Overload 3__: Prints Fender data for time t. Parameters t (float) : the time (s) e (Fender) : the line instance with its subobjects to be printed get_version get_version() Retrives the API version. Returns string","title":"API"}]}